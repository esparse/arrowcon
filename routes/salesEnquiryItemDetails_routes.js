const express = require("express")
const {CreatesalesEnquiryitemdetailsDetails,viewsalesEnquiryitemdetailsDetails,deletesalesEnquiryitemdetailsDetails,updatesalesEnquiryitemdetailsDetails,getSinglesalesEnquiryitemdetailsDetails,getsalesEnquiryitemdetailsDetailsbySalesEnquiryId,deletesalesEnquiryitemdetailsDetailsbySalesEnquiryId,updatesalesEnquiryitemdetailsDetailsbysalesQuotationId} = require("../controller/SalesEnquiryitemdetails_controller")
const router = express.Router()
/**
 * @swagger
 * components:
 *   schemas:
 *     salesEnquiryitemdetails:
 *       type: object
 *       required:
 *         - salesEnquiryitemdetailsId
 *         - SalesEnquiryId
 *         - ItemDetails
 *         - Description
 *         - Unit
 *         - Quantity
 *         - itemdetailsinpurchaseestimationenquiryId
 *       properties:
 *         salesEnquiryitemdetailsId:
 *           type: integer
 *           description: salesEnquiryitemdetailsId
 *         SalesEnquiryId:
 *           type: string
 *           description: ItemDetails
 *         ItemDetails:
 *           type: string
 *           description: ItemDetails
 *         Description:
 *           type: string
 *           description: Description
 *         Unit:
 *           type: string
 *           description: Unit
 *         Quantity:
 *           type: string
 *           description: Quantity
 *         itemdetailsinpurchaseestimationenquiryId:
 *           type: string
 *           description: Quantity
 *       example:
 *         salesEnquiryitemdetailsId: autoGenerated
 *         SalesEnquiryId: item1 ,
 *         ItemDetails: item1 ,
 *         Description: njfbfbu ,
 *         Unit: 20 ,
 *         Quantity : 10 ,      
 *         itemdetailsinpurchaseestimationenquiryId : 10102 ,      
 *
 */

/**
 * @swagger
 * /api/v1/viewsalesEnquiryitemdetailsDetails:
 *   get:
 *     summary: get all salesEnquiryitemdetails
 *     tags: [salesEnquiryitemdetails]
 *     responses:
 *       200:
 *         description: get All salesEnquiryitemdetails
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               items:
 *                 $ref: '#/components/schemas/salesEnquiryitemdetails'
 */
router.route("/viewsalesEnquiryitemdetailsDetails").get(viewsalesEnquiryitemdetailsDetails)


/**
 * @swagger
 * /api/v1/CreatesalesEnquiryitemdetailsDetails:
 *   post:
 *     summary: add a new salesEnquiryitemdetails
 *     tags: [salesEnquiryitemdetails]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/salesEnquiryitemdetails'
 *     responses:
 *       200:
 *         description: create salesEnquiryitemdetails successfull
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/salesEnquiryitemdetails'
 *       500:
 *         description: Some server error
 */
 router.route("/CreatesalesEnquiryitemdetailsDetails").post(CreatesalesEnquiryitemdetailsDetails)

  /**
 * @swagger
 * /api/v1/deletesalesEnquiryitemdetailsDetails/{salesEnquiryitemdetailsId}:
 *   delete:
 *     summary: Delete a salesEnquiryitemdetails
 *     tags: [salesEnquiryitemdetails]
 *     parameters:
 *         - in: path
 *           name: salesEnquiryitemdetailsId
 *           required: true
 *           description: salesEnquiryitemdetailsId is required
 *           schema:
 *              type: string
 *     responses:
 *       200:
 *         description: salesEnquiryitemdetails deleted successfully
 */

router.route("/deletesalesEnquiryitemdetailsDetails/:salesEnquiryitemdetailsId").delete(deletesalesEnquiryitemdetailsDetails)

/**
 * @swagger
 * /api/v1/updatesalesEnquiryitemdetailsDetails:
 *   post:
 *     summary: Update salesEnquiryitemdetails Details
 *     tags: [salesEnquiryitemdetails]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/salesEnquiryitemdetails'
 *     responses:
 *       200:
 *         description: Sales enquiry item details updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/salesEnquiryitemdetails'
 *       500:
 *         description: Internal server error
 */

router.route("/updatesalesEnquiryitemdetailsDetails").post(updatesalesEnquiryitemdetailsDetails)
/**
 * @swagger
 * /api/v1/getSinglesalesEnquiryitemdetailsDetails/{salesEnquiryitemdetailsId}:
 *   get:
 *     summary: Get a salesEnquiryitemdetails by ID
 *     tags: [salesEnquiryitemdetails]
 *     description: Retrieve a salesEnquiryitemdetails by their unique ID.
 *     parameters:
 *       - in: path
 *         name: salesEnquiryitemdetailsId
 *         required: true
 *         description: ID of the salesEnquiryitemdetails to retrieve
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Successfully retrieved the salesEnquiryitemdetails
 *       404:
 *         description: salesEnquiryitemdetails not found
 */
router.route("/getSinglesalesEnquiryitemdetailsDetails/:salesEnquiryitemdetailsId").get(getSinglesalesEnquiryitemdetailsDetails)
/**
 * @swagger
 * /api/v1/getsalesEnquiryitemdetailsDetailsbySalesEnquiryId/{SalesEnquiryId}:
 *   get:
 *     summary: Get sales enquiry item details by SalesEnquiryId
 *     parameters:
 *       - in: path
 *         name: SalesEnquiryId
 *         required: true
 *         description: ID of the sales enquiry
 *         schema:
 *           type: string
 *     responses:
 *       '200':
 *         description: Successful response
 *       '404':
 *         description: Sales enquiry not found
 */


router.route("/getsalesEnquiryitemdetailsDetailsbySalesEnquiryId/:SalesEnquiryId").get(getsalesEnquiryitemdetailsDetailsbySalesEnquiryId)

/**
 * @swagger
 * /api/v1/deletesalesEnquiryitemdetailsDetailsbySalesEnquiryId/{SalesEnquiryId}:
 *   delete:
 *     summary: Delete sales enquiry item details by SalesEnquiryId
 *     parameters:
 *       - in: path
 *         name: SalesEnquiryId
 *         required: true
 *         description: ID of the sales enquiry
 *         schema:
 *           type: string
 *     responses:
 *       '200':
 *         description: Successful deletion
 *       '404':
 *         description: Sales enquiry not found
 */


router.route("/deletesalesEnquiryitemdetailsDetailsbySalesEnquiryId/:SalesEnquiryId").delete(deletesalesEnquiryitemdetailsDetailsbySalesEnquiryId)



/**
 * @swagger
 * /api/v1/updatesalesEnquiryitemdetailsDetailsbysalesQuotationId:
 *   post:
 *     summary: Update salesEnquiryitemdetails details by salesQuotationId
 *     tags: [salesEnquiryitemdetails]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/salesEnquiryitemdetails'
 *     responses:
 *       200:
 *         description: Sales enquiry item details updated successfully
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/salesEnquiryitemdetails'
 *       500:
 *         description: Internal server error
 */

router.route("/api/v1/updatesalesEnquiryitemdetailsDetailsbysalesQuotationId")
  .post(updatesalesEnquiryitemdetailsDetailsbysalesQuotationId);
module.exports = router

