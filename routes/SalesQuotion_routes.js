const express = require("express")
const {CreateSalesQuotionDetails,viewSalesQuotionDetails,deleteSalesQuotionDetails,updateSalesQuotionDetails,getsingleSalesQuotionDetails} = require("../controller/SalesQuotion_controller")
const router = express.Router()
/**
 * @swagger
 * components:
 *   schemas:
 *     SalesQuotion:
 *       type: object
 *       required:
 *         - SalesQuotionId
 *         - Date
 *         - QuotionCurrencyId
 *         - CustomerId
 *         - Subject
 *         - OfferValidity
 *         - PaymentTerm
 *         - DeliveryTerm
 *         - DeliveryBasis
 *         - StatusId
 *         - TotalAmtTHB
 *         - IssuedBy
 *         - ApprovedBy
 *       properties:
 *         SalesQuotionId :
 *           type: integer
 *           description: SalesQuotionId
 *         Date:
 *           type: string
 *           description: Date
 *         QuotionCurrencyId:
 *           type: string
 *           description: QuotionCurrencyId
 *         CustomerId:
 *           type: string
 *           description: CustomerId
 *         Subject:
 *           type: string
 *           description: Subject
 *         ProductService:
 *           type: string
 *           description:  ProductService
 *         Description:
 *           type: string
 *           description:  Description
 *         Quantity:
 *           type: string
 *           description:  Quantity
 *         UnitPriceTHB:
 *           type: string
 *           description: UnitPriceTHB
 *         OfferValidity:
 *           type: string
 *           description: OfferValidity
 *         PaymentTerm:
 *           type: string
 *           description: PaymentTerm
 *         DeliveryTerm:
 *           type: string
 *           description: DeliveryTerm
 *         DeliveryBasis:
 *           type: string
 *           description: DeliveryBasis
 *         StatusId:
 *           type: string
 *           description: DeliveryBasis
 *         TotalAmtTHB:
 *           type: string
 *           description: TotalAmtTHB
 *         IssuedBy:
 *           type: string
 *           description: TotalAmtTHB
 *         ApprovedBy:
 *           type: string
 *           description: ApprovedBy
 *       example:
 *         SalesQuotionId : autoGenerated
 *         QuotionCurrencyId : 1
 *         CustomerId : 503, KSL Tower 9th Floor, Sriayudhya Rd.,
 *         Date : 08-03-2023
 *         Subject : Bangkok
 *         OfferValidity : 0817441009
 *         PaymentTerm : SalesQuotion@example.com
 *         DeliveryTerm : one-time-Structure
 *         DeliveryBasis : abcd
 *         StatusId : 1
 *         TotalAmtTHB : 17845
 *         IssuedBy : ABCD
 *         ApprovedBy : admin
 */

/**
 * @swagger
 * /api/v1/viewSalesQuotionDetails:
 *   get:
 *     summary: get all SalesQuotion
 *     tags: [SalesQuotion]
 *     responses:
 *       200:
 *         description: get All SalesQuotion
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               items:
 *                 $ref: '#/components/schemas/SalesQuotion'
 */
router.route("/viewSalesQuotionDetails").get(viewSalesQuotionDetails)


/**
 * @swagger
 * /api/v1/CreateSalesQuotionDetails:
 *   post:
 *     summary: add a new SalesQuotion
 *     tags: [SalesQuotion]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/SalesQuotion'
 *     responses:
 *       200:
 *         description: create SalesQuotion successfull
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/SalesQuotion'
 *       500:
 *         description: Some server error
 */
 router.route("/CreateSalesQuotionDetails").post(CreateSalesQuotionDetails)

/**
 * @swagger
 * /api/v1/deleteSalesQuotionDetails/{SalesQuotionId}:
 *   delete:
 *     summary: Delete a SalesQuotion
 *     tags: [SalesQuotion]
 *     parameters:
 *       - in: path
 *         name: SalesQuotionId
 *         required: true
 *         description: SalesQuotionId is required
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: SalesQuotion deleted successfully
 */

router.route("/deleteSalesQuotionDetails/:SalesQuotionId").delete(deleteSalesQuotionDetails)

/**
* @swagger
* /api/v1/updateSalesQuotionDetails:
*   post:
*     summary: upAddress SalesQuotion Details
*     tags: [SalesQuotion]
*     requestBody:
*       required: true
*       content:
*         application/json:
*           schema:
*             $ref: '#/components/schemas/SalesQuotion'
*     responses:
*       200:
*         description: upAddress SalesQuotion Details successfull
*         content:
*           application/json:
*             schema:
*               $ref: '#/components/schemas/SalesQuotion'
*       500:
*         description: Some server error
*/
router.route("/updateSalesQuotionDetails").post(updateSalesQuotionDetails)
/**
 * @swagger
 * /api/v1/getsingleSalesQuotionDetails/{SalesQuotionId}:
 *   get:
 *     summary: Get details of a single SalesQuotion
 *     description: Retrieve details of a SalesQuotion based on its ID.
 *     parameters:
 *       - in: path
 *         name: SalesQuotionId
 *         required: true
 *         description: ID of the SalesQuotion to retrieve
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Successful response
 *         content:
 *           application/json:
 *             example:
 *               success: true
 *               message: SalesQuotion Details Found
 *               data:
 *                 SalesQuotionId: "12345"
 *       404:
 *         description: SalesQuotion not found
 *         content:
 *           application/json:
 *             example:
 *               success: false
 *               message: SalesQuotion Details Not Found
 *               data: null
 *       500:
 *         description: Internal server error
 *         content:
 *           application/json:
 *             example:
 *               success: false
 *               message: Something went wrong
 *               data: null
 */
router.route("/getsingleSalesQuotionDetails/:SalesQuotionId").get(getsingleSalesQuotionDetails)
module.exports = router

